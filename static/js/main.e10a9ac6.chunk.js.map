{"version":3,"sources":["constants/types.js","actions/chart.js","components/Chart/index.js","selectors/charts.js","components/App/index.js","utilities/actions.js","serviceWorker.js","reducers/charts.js","reducers/typeMap.js","reducers/index.js","sagas/charts.js","sagas/index.js","index.js"],"names":["REFRESH_CHARTS","REFRESH_CHARTS_OF_TYPE","REFRESH_CHARTS_VIA_TYPEMAP","DISPATCH_ACTION_AND_REFRESH","FETCH_NEW_DATA","RETICULATE_SPLINES","INITIALIZE_FLUX_CAPACITOR","nextChartID","chartTypes","dispatchActionAndRefresh","action","condition","type","payload","setDate","id","date","Chart","_this","this","chart","props","react_default","a","createElement","className","onChange","e","setName","target","value","name","setType","PureComponent","connect","getSortedCharts","createSelector","state","charts","Object","values","sort","b","junkAction","actionCreator","arguments","length","undefined","apply","makeRefreshableAction","Date","now","App","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","createChart","bind","assertThisInitialized","refreshCharts","refreshTypeACharts","refreshTypeBCharts","refreshStaleCharts","refreshChartsOfType","refreshChartsViaTypeMap","onClick","map","components_Chart","key","Component","defaultProps","Math","floor","random","chartType","Boolean","window","location","hostname","match","INITIAL","combineReducers","objectSpread","defineProperty","newState","_action$payload","_action$payload2","_action$payload3","_action$payload4","console","log","concat","typeMap","toConsumableArray","push","newType","keys","forEach","indexOf","filter","chartId","chartsSaga","refreshAllCharts","refreshChartsOfTypeUsingTypeMap","regenerator_default","wrap","_context","prev","next","all","takeEvery","stop","_marked","_arr","_i","_context2","select","sent","put","_marked2","_arr2","_i2","_context3","_marked3","chartIDs","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","_context4","Symbol","iterator","done","t0","return","finish","_marked4","wrappedAction","_wrappedAction$payloa","_arr3","_i3","_context5","_marked5","rootSaga","sagas_marked","__webpack_require__","d","__webpack_exports__","store","sagaMiddleware","createSagaMiddleware","applyMiddleware","createStore","createStoreWithMiddleware","reducers","__REDUX_DEVTOOLS_EXTENSION__","run","ReactDOM","render","es","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e10a9ac6.chunk.js","sourcesContent":["export const CREATE_CHART                 = 'CREATE_CHART';\nexport const DELETE_CHART                 = 'DELETE_CHART';\n\nexport const REFRESH_CHARTS               = 'REFRESH_CHARTS';\nexport const REFRESH_CHARTS_OF_TYPE       = 'REFRESH_CHARTS_OF_TYPE';\nexport const REFRESH_CHARTS_VIA_TYPEMAP   = 'REFRESH_CHARTS_VIA_TYPEMAP';\n\nexport const DISPATCH_ACTION_AND_REFRESH  = 'DISPATCH_ACTION_AND_REFRESH';\n\nexport const SET_DATE                     = 'SET_DATE';\nexport const SET_TYPE                     = 'SET_TYPE';\nexport const SET_NAME                     = 'SET_NAME';\n\nexport const JUNK_ACTION                  = 'JUNK_ACTION';\nexport const FETCH_NEW_DATA               = 'FETCH_NEW_DATA';\nexport const RETICULATE_SPLINES           = 'RETICULATE_SPLINES';\nexport const INITIALIZE_FLUX_CAPACITOR    = 'INITIALIZE_FLUX_CAPACITOR';\n","import {\n  CREATE_CHART,\n  DELETE_CHART,\n\n  REFRESH_CHARTS,\n  REFRESH_CHARTS_OF_TYPE,\n  REFRESH_CHARTS_VIA_TYPEMAP,\n\n  DISPATCH_ACTION_AND_REFRESH,\n\n  SET_DATE,\n  SET_TYPE,\n  SET_NAME,\n\n  JUNK_ACTION,\n} from '../constants/types';\n\nlet nextChartID = 0;\n\nconst chartTypes = ['Type A', 'Type B', 'Type C', 'Type D', 'Type E', 'Type F'];\n\nexport const createChart = () => {\n  const id = nextChartID++;\n  return {\n    type : CREATE_CHART,\n    payload : {\n              id,\n              name : 'New chart',\n              type : chartTypes[ Math.floor(Math.random() * chartTypes.length) ],\n              date : Date.now(),\n            }\n  }\n};\n\nexport const deleteChart = () => {\n  return {\n    type : DELETE_CHART\n  }\n};\n\nexport const refreshCharts = () => {\n  return {\n    type : REFRESH_CHARTS\n  }\n};\n\nexport const refreshChartsViaTypeMap = (chartType) => {\n  return {\n    type    : REFRESH_CHARTS_VIA_TYPEMAP,\n    payload : { chartType }\n  }\n};\n\nexport const refreshChartsOfType = (chartType) => {\n  return {\n    type    : REFRESH_CHARTS_OF_TYPE,\n    payload : { chartType }\n  }\n};\n\n\nexport const dispatchActionAndRefresh = (action, condition) => {\n  return {\n    type    : DISPATCH_ACTION_AND_REFRESH,\n    payload : { action, condition }\n  }\n}\n\nexport const setDate = (id, date) => {\n  return {\n    type    : SET_DATE,\n    payload : {id, date}\n  }\n};\n\nexport const setType = (id, type) => {\n  return {\n    type    : SET_TYPE,\n    payload : {id, type}\n  }\n};\n\nexport const setName = (id, name) => {\n  return {\n    type    : SET_NAME,\n    payload : {id, name}\n  }\n};\n\nexport const junkAction = (name, type) => {\n  return {\n    type : JUNK_ACTION,\n    payload : { name, type }\n  }\n};\n","import React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\n\nimport './Chart.css';\n\nimport { setName, setType, setDate } from '../../actions';\n\nclass Chart extends PureComponent {\n\n  render() {\n\n    const chart = this.props.chart;\n\n    return (\n      <div className='chart'>\n        <div className='field'>ID</div>\n        <div className='value'>{chart.id}</div>\n\n        <div className='field'>Name</div>\n        <div className='value'>\n          <input\n            type = 'text'\n            onChange={ e => this.props.setName(chart.id, e.target.value) }\n            value={chart.name} />\n        </div>\n\n        <div className='field'>Type</div>\n        <div className='value'>\n          <input\n            type = 'text'\n            onChange={ e => this.props.setType(chart.id, e.target.value) }\n            value={chart.type} />\n        </div>\n\n        <div className='field'>Date</div>\n        <div className='value'>\n          <input\n            type = 'text'\n            onChange={ e => this.props.setDate(chart.id, e.target.value) }\n            value={chart.date} />\n        </div>\n      </div>\n    )\n  }\n}\n\n\nexport default connect( null, { setName, setType, setDate } )( Chart );\n","import { createSelector } from 'reselect';\n\nexport const getCharts  = state => state.charts;\n\nexport const getSortedCharts = createSelector(\n  [getCharts],\n  (charts) => {\n    return Object.values(charts).sort( (a,b) => a - b )\n  }\n)\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport './App.css';\n\nimport Chart from '../Chart';\n\nimport { createChart, refreshCharts, refreshChartsOfType, refreshChartsViaTypeMap, junkAction as unwrappedJunkAction } from '../../actions';\nimport { getSortedCharts } from '../../selectors';\nimport { makeRefreshableAction } from '../../utilities/actions';\n\n/* Alternatively, you could import dispatchActionAndRefresh, add it via mapDispatchToProps and call it this way:\n\nthis.props.dispatchActionAndRefresh(\n  junkAction('junk', 'useless'),\n  (chart) => { return Date.now() - chart.date > 15 * 1000 }\n)\n\nBut by using makeRefreshableAction, you maintain the interface to the original action and transparently\ndispatch a refresh to the charts based upon the matching condition.\n\n*/\n\nconst junkAction = makeRefreshableAction(\n  unwrappedJunkAction,\n  (chart) => { return Date.now() - chart.date > 15 * 1000 }\n);\n\nclass App extends Component {\n\n  static defaultProps = {\n    charts : []\n  }\n\n  constructor(props) {\n    super(props);\n\n    this.createChart        = this.createChart.bind(this);\n    this.refreshCharts      = this.refreshCharts.bind(this);\n    this.refreshTypeACharts = this.refreshTypeACharts.bind(this);\n    this.refreshTypeBCharts = this.refreshTypeBCharts.bind(this);\n    this.refreshStaleCharts = this.refreshStaleCharts.bind(this);\n  }\n\n  createChart() {\n    this.props.createChart();\n  }\n\n  refreshCharts() {\n    this.props.refreshCharts();\n  }\n\n  refreshTypeACharts() {\n    this.props.refreshChartsOfType('Type A');\n  }\n\n  refreshTypeBCharts() {\n    this.props.refreshChartsViaTypeMap('Type B');\n  }\n\n  refreshStaleCharts() {\n    this.props.junkAction('junk', 'useless');\n    // or, if you didn't use makeRefreshableAction:\n    /*this.props.dispatchActionAndRefresh(\n      junkAction('junk', 'useless'),\n      (chart) => { return Date.now() - chart.date > 15 * 1000 }\n    )*/\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className='ui'>\n          <ul className='controls'>\n            <li><button onClick = { this.createChart } >Add chart</button></li>\n            <li><button onClick = { this.refreshCharts } >Refresh charts</button></li>\n            <li><button onClick = { this.refreshTypeACharts } >Refresh Type A charts</button></li>\n            <li><button onClick = { this.refreshTypeBCharts } >Refresh Type B charts, via type map</button></li>\n            <li><button onClick = { this.refreshStaleCharts } >Refresh charts that are 15 seconds old</button></li>\n          </ul>\n          <ul className='notes'>\n            <li>Okay. Start off by just clicking the 'Add chart' button a few times. That'll add some dummy \"chart\" widgets, which are\n            just boxes that have a few values. You can change them.\n            </li>\n            <li>The simplest case is just the 'Refresh charts' button. Click that, and everything refreshes.</li>\n            <li>Next simplest case would be the 'Refresh Type A charts' button. Click that, and only charts of Type A will refresh. Note\n            that chart types are randomly assigned upon creation, and you can edit the type of you don't have an \"Type A\" charts.</li>\n            <li>The slightly more complicated flavor is 'Refresh Type B charts, via type map'. This uses another key in the redux store, \"typeMap\".\n            That'll store a mapping from chart type to a list of chart IDs. This way we don't need to do a O(n) lookup across all charts to see if\n            they match, we'll have pre-computed and stored the matching charts. Obviously, this could be extended to use other chart attributes\n            as well.</li>\n            <li>The complex case is refreshing 15 second old charts. That one dispatches a different type of action that fires off some\n            arbitrary action (not specifically a REFRESH_CHART* type), and also takes a condition function that operates on each chart in the list\n            and refreshes it if it matches the condition. In this case, if it's more than 15 seconds old.</li>\n            <li>Since this is react, there's a ton of boilerplate and irrelevant stuff set up just to make the demo happen. You can really\n            just look at src/sagas/charts.js to see the saga implementation with notes on it. The rest is not documented and not written to OmniSci\n            style guidelines.</li>\n          </ul>\n        </div>\n        <div className='charts'>\n          { this.props.charts.map( chart => <Chart key={chart.id} chart={chart} /> ) }\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    charts : getSortedCharts(state)\n  }\n}\n\nexport default connect( mapStateToProps, { createChart, refreshCharts, refreshChartsOfType, refreshChartsViaTypeMap, junkAction } )( App );\n","import { dispatchActionAndRefresh } from '../actions';\n\nexport function makeRefreshableAction( actionCreator, condition = () => true ) {\n  return (...args) => {\n    return dispatchActionAndRefresh(\n      actionCreator(...args),\n      condition\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  CREATE_CHART,\n  DELETE_CHART,\n\n  SET_DATE,\n  SET_TYPE,\n  SET_NAME,\n\n  JUNK_ACTION\n} from '../constants/types';\n\nconst INITIAL = {};\n\nexport default (state = INITIAL, action) => {\n  switch(action.type) {\n    case CREATE_CHART : {\n      const chart = action.payload;\n      return {\n        ...state,\n        [chart.id] : chart\n      }\n    }\n    case DELETE_CHART : {\n      const {id} = action.payload;\n      const newState = {...state};\n      delete newState[id];\n      return newState;\n    }\n    case SET_DATE : {\n      const { id, date } = action.payload;\n      const newState   = { ...state };\n      newState[id]     = { ...newState[id], date };\n      return newState;\n    }\n    case SET_TYPE : {\n      const { id, type } = action.payload;\n      const newState   = { ...state };\n      newState[id]     = { ...newState[id], type };\n      return newState;\n    }\n    case SET_NAME : {\n      const { id, name } = action.payload;\n      const newState   = { ...state };\n      newState[id]     = { ...newState[id], name };\n      return newState;\n    }\n    case JUNK_ACTION : {\n      const { name, type } = action.payload;\n      console.log(`A junk action with name \"${name}\" of type \"${type}\" was run. Nothing happens.`);\n      return state;\n    }\n    default :\n      return state;\n  }\n};\n","import {\n  CREATE_CHART,\n  SET_TYPE,\n} from '../constants/types';\n\nconst INITIAL = {};\n\nexport default (state = INITIAL, action) => {\n  switch(action.type) {\n    case CREATE_CHART : {\n      const chart = action.payload;\n\n      const newState = { ...state };\n\n      newState[chart.type] = newState[chart.type]\n        ? [ ...newState[chart.type] ]\n        : [];\n\n      newState[chart.type].push(chart.id)\n      return newState;\n\n    }\n    case SET_TYPE : {\n      const { id, type : newType } = action.payload;\n      const newState     = { ...state };\n\n      // first thing we need to do, tediously, is nuke the chart id from prior types.\n      // this could be faster, but the assumption is that chart types won't change.\n      // maybe we wouldn't even need to delete?\n      Object.keys(newState).forEach( type => {\n\n        if ( newState[type].indexOf(id) !== -1 ) {\n          newState[type] = newState[type].filter( chartId => chartId !== id );\n        }\n      });\n\n      newState[newType] = newState[newType]\n        ? [ ...newState[newType] ]\n        : [];\n\n      newState[newType].push(id);\n      return newState;\n    }\n    default :\n      return state;\n  }\n}\n","import { combineReducers } from 'redux';\n\nimport charts  from './charts';\nimport typeMap from './typeMap';\n\nexport default combineReducers({\n  charts,\n  typeMap\n});\n","import { all, put, takeEvery, select } from 'redux-saga/effects';\n\nimport {\n  REFRESH_CHARTS,\n  REFRESH_CHARTS_OF_TYPE,\n  REFRESH_CHARTS_VIA_TYPEMAP,\n  DISPATCH_ACTION_AND_REFRESH,\n  FETCH_NEW_DATA,\n  RETICULATE_SPLINES,\n  INITIALIZE_FLUX_CAPACITOR,\n} from '../constants/types';\n\nimport {\n  setDate,\n} from '../actions';\n\n/*\n  Okay, so here's where I'll try to explain my though process. First of all, the\n  action being \"REFRESH_CHARTS\" is arbitrary. Any action that'd cause all the charts\n  to refresh could go in here and call the refreshAllCharts function to call them all.\n  A couple of example alternative actions are provided here - as more get added, we just\n  add 'em into the yield all here.\n\n  Note that for demo purposes \"refreshing\" a chart just consists of setting its date to\n  NOW, whereas in actuality we'd want to do something more complicated.\n*/\n\nexport default function* chartsSaga() {\n  yield all([\n    takeEvery( REFRESH_CHARTS,              refreshAllCharts ),\n    takeEvery( FETCH_NEW_DATA,              refreshAllCharts ),\n    takeEvery( RETICULATE_SPLINES,          refreshAllCharts ),\n    takeEvery( INITIALIZE_FLUX_CAPACITOR,   refreshAllCharts ),\n    takeEvery( REFRESH_CHARTS_OF_TYPE,      refreshChartsOfType ),\n    takeEvery( REFRESH_CHARTS_VIA_TYPEMAP,  refreshChartsOfTypeUsingTypeMap ),\n    takeEvery( DISPATCH_ACTION_AND_REFRESH, dispatchActionAndRefresh )\n  ])\n}\n\n/* This function should hand most cases. I'd make an argument that if \"something\" happens\nthat should cause a refresh, we can just blast it out to all charts on the page, unless we\nhave a performance reason to limit it. Maybe we do? I dunno.\n\nBut as a starting point, I'd rather skew towards the less involved flavor.\n\n*/\n\nfunction* refreshAllCharts(action) {\n  const state = yield select();\n  const charts = state.charts;\n\n  for (const chart of Object.values(charts)) {\n    yield put( setDate( chart.id, Date.now() ) )\n  }\n}\n\n/* this one is barely slightly more complicated, and just arbitrarily. In this case,\nthe action takes a single value in its payload (\"chartType\" here, because of course a\nstandard redux action already has a \"type\" and I didn't want the two to get confused\nand we can't have nice things), and then behaves the same way except that it checks\nto see if the type matches whatever we're refreshing.\n\nNaturally \"type\" is arbitrary, and we could have different functions to refresh based on\ndifferent parameters. But if we're doing this for more than 1 or 2 fields, we'd probably\nwant to use a more generic approach.\n\n*/\n\nfunction* refreshChartsOfType(action) {\n  const { chartType } = action.payload;\n  const state = yield select();\n  const charts = state.charts;\n\n  for (const chart of Object.values(charts)) {\n    if ( chart.type === chartType ) {\n      yield put( setDate( chart.id, Date.now() ) )\n    }\n  }\n}\n\n/* This is the hyperdrive version of the above. The earlier method iterates over all of\nthe charts and does a comparison to see if they match the chart type (or whatever other key\nwe're using, in a different method). It's easy to implement, but it's relatively slow. Consider\nif we've got 100 charts on the page and need to look through the whole list just to see that 1\nor 2 charts need to be refreshed. It's not going to be brutally slow since it's just a loop and\nmost users probably wouldn't have a \"lot\" of charts on a page, but we're supposed to be high performance,\nright?\n\nSo this one uses an extra slice in the redux store that just maps type -> array of chart IDs (in this case),\nso when we come back in it can look up only the chart IDs that match the given type and iterate on them.\n\nMy assumption is that most of the time this isn't going to be worthwhile, since the difference between iterating\nover 10 charts and doing a simple conditional vs 3 charts and not checking anything is going to be trivial.\n\nBut 50 charts? 100? A more complicated condition? Then it could pay off.\n\nWe could also look into stuffing this into a selector of some sort if the conditional logic to see if a chart\nshould be refreshed is more complicated.\n\n*/\n\nfunction* refreshChartsOfTypeUsingTypeMap(action) {\n  const { chartType } = action.payload;\n  const state = yield select();\n  const { typeMap } = state;\n\n  const chartIDs = typeMap[chartType];\n\n  for (const id of chartIDs) {\n    yield put( setDate( id, Date.now() ) )\n  }\n}\n\n/* This is a very generic approach, and functionally very similar to the existing code.\n\nTo use this one, you'd dispatch an action of type DISPATCH_ACTION_AND_REFRESH, which\nhas an action and a condition in its payload. Yes, having an action have a payload with an\naction is confusing, I agree. Same issue as up above. Anyway, this saga will just immediately\ndispatch whatever action it was handed, and then iterate through the charts and check to see\nif they match the condition. If so, we refresh, and if not we skip it.\n\nThere's also a wrapper function for this in utilities/actions, which maintains the interface\nof the original action creator and ensures that you don't need to keep handing through the\nconditional function all over the place.\n\nHonestly? I don't like this approach. It feels overly generic without a strong immediate need. On the other hand,\nit's very future proofed. It's also virtually the same as what we've already got. But hey, it's in a saga, so it's\na smidgen different.\n*/\n\nfunction* dispatchActionAndRefresh(wrappedAction) {\n  const { action, condition } = wrappedAction.payload;\n  yield put(action);\n  const state = yield select();\n  const charts = state.charts;\n\n  for (const chart of Object.values(charts)) {\n    if ( condition(chart) ) {\n      yield put( setDate( chart.id, Date.now() ) )\n    }\n  }\n}\n","import { all } from 'redux-saga/effects';\n\nimport chartsSaga from './charts';\n\nexport default function* rootSaga() {\n  yield all([\n    chartsSaga(),\n  ])\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nimport {Provider} from 'react-redux';\nimport {createStore, applyMiddleware} from 'redux';\nimport createSagaMiddleware from 'redux-saga';\n\nimport reducers from './reducers';\nimport rootSaga from './sagas';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst createStoreWithMiddleware = applyMiddleware(sagaMiddleware)(createStore);\n\nexport const store = createStoreWithMiddleware(reducers, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\nsagaMiddleware.run(rootSaga);\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>\n, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}